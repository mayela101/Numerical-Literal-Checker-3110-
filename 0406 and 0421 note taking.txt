<symbol> ::= __expression__


<symbol> is a non-terminal variable that is always enclosed between the pair <>.
::= means that the symbol on the left must be replaced with the expression on the right.
__expression__ consists of one or more sequences of either terminal or non-terminal symbols where each sequence is separted by "a vertical bar" "|" indicating a choice, the whole being a possible substitution for the symbol on the left. 


Items existing 0 or more times are enclosed in curely brackets or suffixed with an asterisk (*) such as <word>::=<letter> {<letter>} or word::=<letter><letter>*, respectively. 

Items exisiting 1 or more times are suffixed with an addition (plus) symbol, + , such as 
<word> ::= <letter>+

Where items are grouped, they are enclosed in simple parentheses. 
----------------------------------------------------------------------------------------
lc_letter ::= "a"..."z"
name	  ::= lc_letter(lc_letter|"_")*

An "lc_letter" is any of the single characters "a" through "z". 
A "name" is an "lc_letter" followed by a sequence of zero or more "lc_letter" and underscores. 

Each rule begins with a name and ::=
A vertical bar (|) is used to separate alternatives. It is the least binding operator. 
A star(*) means zero or more repetitions of the preceding items.  
A plus(+) means one or more repetitions.
A phrase enclosed in square brackets([]) means zero or one occurences
(in other words, the enclosed phrase is optional). 
The * and + operators bind as tightly as possible.
Parentheses are used for grouping. 

Question: what is the difference between * and []? 
Is that * means zero or more occurences and [] is zero or one occurence?


Literal strings are enclosed in quotes. 
White space is only meaningful to separate tokens.
Rules are normally contained on a single line.
Rules with many alternatives may be formatted alternatively with each line after the first beginning with a vertical bar. 

Review:
name		::=	lc_letter(lc_letter | "_")*
lc_letter	::=	"a"..."z"

In lexical definitions, two more conventions are used:
1. Two literal characters separated by three dots mean a choice of any single character in the given (inclusive) range of ASCII characters. 
2. A phrase between angular brackets(<...>) gives an informal description of the symbol defined. 

Even though the notation is almost the same, there is a big difference between the meaning of lexical and syntactic definitions: a lexical definition operates on the individual characters of the input source, while a syntax definition operates on the stream of tokens generated by the lexical analysis. 

-------------------------------------------------------------------------------------
integer		::=	decinteger | bininteger | octinteger | hexinteger
decinteger	::=	nonzerodigit(["_"] digit)* | "0"+(["_"]"0")*
(non-zero digit) CONCATENATE EITHER WITH (digit)* OR (_digit)* OR (00)* OR (00*0)* OR (0_0)* OR(00*_0)*

Per professor QCD, after concat, do (R1 | R2)*
-----------------------------------------
































